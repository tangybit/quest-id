---
import { Image } from 'astro:assets';
const { imagePaths } = Astro.props;
---

<div class="gallery-container">
  <div class="gallery">
    {imagePaths.map((path, idx) => (
      <Image 
        src={path} 
        alt={`Image ${idx + 1}`} 
        class="gallery-image" 
        loading="lazy" 
        format="auto" 
        width={500} 
        height={350} 
      />
    ))}
  </div>

  {imagePaths.length > 1 && (
    <div class="dots">
      {imagePaths.map((_, idx) => (
        <span class="dot" data-index={idx}></span>
      ))}
    </div>
  )}
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    // Select all gallery containers on the page
    const galleryContainers = document.querySelectorAll('.gallery-container');
    
    galleryContainers.forEach(galleryContainer => {
        const gallery = galleryContainer.querySelector('.gallery');
        const dots = galleryContainer.querySelectorAll('.dot');
        const imageCount = dots.length;

        if (gallery) {
            // Add scroll event listener to each gallery
            gallery.addEventListener('scroll', () => {
                const scrollWidth = gallery.scrollWidth - gallery.clientWidth;
                const scrollPosition = gallery.scrollLeft;
                const scrollIndex = Math.round((scrollPosition / scrollWidth) * (imageCount - 1));
                
                // Update dots based on the current scroll position
                dots.forEach((dot, idx) => {
                    dot.classList.toggle('active', idx === scrollIndex);
                });
            });

            // Set the first dot as active initially
            if (dots.length > 0) dots[0].classList.add('active');
        }
    });
});
</script>

<style>

.gallery-container {
    position: relative;
    width: 100%;
    max-width: 500px;
    height: 500px; /* Increase the height to accommodate the dots */
    overflow: hidden;
    margin: 0 auto;
    padding-bottom: 0px; /* Add padding to create space for the dots */
}

/* Custom scrollbar styling for the gallery */
.gallery {
    display: flex;
    overflow-x: scroll;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
    width: 100%;
    height: 100%;
    padding: 0;
    gap: 50px;
    
    /* Hide the scrollbar by default, show on hover */
    scrollbar-width: thin; /* Firefox */
    scrollbar-color: rgba(30, 58, 138, 0.5) transparent; /* Set thumb color with transparency */
}

.gallery::-webkit-scrollbar {
    width: 12px;
    height: 12px;
}

.gallery::-webkit-scrollbar-thumb {
    background-color: rgba(30, 58, 138, 0.5); /* Translucent scrollbar thumb */
    border-radius: 10px;
    transition: background-color 0.3s; /* Smooth transition for color changes */
}

.gallery::-webkit-scrollbar-thumb:hover {
    background-color: rgba(55, 74, 191, 0.7); /* Slightly darker translucent thumb on hover */
}

.gallery:hover {
    scrollbar-width: auto; /* Show the scrollbar when hovering */
}

.gallery::-webkit-scrollbar {
    display: none; /* Hide the scrollbar */
}

.gallery:hover::-webkit-scrollbar {
    display: block; /* Show the scrollbar when hovering */
}


.gallery-image {
    flex: 0 0 100%; /* Allow the image to size based on its content */
    width: 550px; /* Set a maximum width */
    height: auto; /* Maintain aspect ratio */
    max-height: calc(100% - 50px); /* Ensure the image does not overlap with the space for the dots */
    object-fit: contain;
    scroll-snap-align: center;
}

.dots {
    display: flex;
    justify-content: center;
    padding-top: 10px;
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 2;
}

.dot {
    height: 10px;
    width: 10px;
    margin: 0 5px;
    background-color: #bbb;
    border-radius: 50%;
    display: inline-block;
    transition: background-color 0.3s, transform 0.3s;
    cursor: pointer;
}

.dot.active {
    background-color: #1E3A8A;
    transform: scale(1.5);
}
</style>
