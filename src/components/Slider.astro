---
import DataDisplay from './DataDisplay.astro'; 
import ScoreDisplay from './ScoreDisplay.astro';
import ImageDisplay from './ImageDisplay.astro';
const { dataGroupedByIndex, sliderId } = Astro.props;
const dataEntries = Object.entries(dataGroupedByIndex);

---

<div id="carousel-wrapper" data-slider-id={sliderId}>
 
    <button id="main-left-arrow" class="main-nav-arrow main-left-arrow" aria-label="Previous set">&lt;</button>

    {dataEntries.length ? (
        dataEntries.map(([index, dataList], slidePosition) => {
            return (
                <div 
                    class="carousel-container hidden" 
                    key={index} 
                    data-index={index}
                    data-slide-position={slidePosition}
                >
                    <ImageDisplay imagePaths={dataList[0].imagePaths} /> 
                    <DataDisplay 
                    index={index}
                    dataGroupedByIndex={dataGroupedByIndex}
                    slidePosition={slidePosition + 1} 
                    sliderId={sliderId}
                    />
                </div>
            );
        })
    ) : (
        <p>No data available.</p>
    )}

    <div class="carousel-container hidden" data-final-slide>
        <ScoreDisplay sliderId={sliderId} />
    </div>

    <button id="main-right-arrow" class="main-nav-arrow main-right-arrow" aria-label="Next set">&gt;</button>
</div>
<script>
    document.addEventListener('DOMContentLoaded', () => {

        function shuffle(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }

        function initializeCarousel() {
            const speciesSliders = document.querySelectorAll('[data-slider-id]');
            speciesSliders.forEach((speciesSlider) => {
                const sliderId = speciesSlider.getAttribute('data-slider-id');
                const carousels = [...speciesSlider.querySelectorAll('.carousel-container')];
                const shuffledCarousels = shuffle(carousels);

                const mainLeftArrow = speciesSlider.querySelector('.main-left-arrow');
                const mainRightArrow = speciesSlider.querySelector('.main-right-arrow');

                let currentSetIndex = 0;

                if (shuffledCarousels.length > 0) {
                    showCarousel(currentSetIndex, shuffledCarousels);
                }

                function showCarousel(index, carouselsArray) {
                    carouselsArray.forEach((carousel) => carousel.classList.add('hidden'));
                    const currentCarousel = carouselsArray[index];
                    currentCarousel.classList.remove('hidden');

                    const isAnswered = currentCarousel.getAttribute('data-answered') === 'true';
                    const isFinalSlide = currentCarousel.hasAttribute('data-final-slide');

                    if (mainRightArrow) {
                        mainRightArrow.disabled = isFinalSlide || !isAnswered;
                    }
                    if (mainLeftArrow) {
                        mainLeftArrow.disabled = index === 0;
                    }
                }

                if (mainLeftArrow) {
                    mainLeftArrow.addEventListener('click', () => {
                        currentSetIndex = (currentSetIndex - 1 + shuffledCarousels.length) % shuffledCarousels.length;
                        showCarousel(currentSetIndex, shuffledCarousels);
                    });
                }

                if (mainRightArrow) {
                    mainRightArrow.addEventListener('click', () => {
                        const currentCarousel = shuffledCarousels[currentSetIndex];
                        const isAnswered = currentCarousel.getAttribute('data-answered') === 'true';

                        if (!isAnswered && !currentCarousel.hasAttribute('data-final-slide')) {
                            return;
                        }

                        currentSetIndex = (currentSetIndex + 1) % shuffledCarousels.length;
                        showCarousel(currentSetIndex, shuffledCarousels);

                        const nextCarousel = shuffledCarousels[currentSetIndex];
                        if (nextCarousel.getAttribute('data-answered') !== 'true') {
                            nextCarousel.setAttribute('data-answered', 'false');
                        }
                    });
                }

                document.addEventListener('answersUpdated', (event) => {
                    if (event.detail.sliderId === sliderId) {
                        const carousel = shuffledCarousels[currentSetIndex];
                        if (carousel) {
                            carousel.setAttribute('data-answered', 'true');
                            showCarousel(currentSetIndex, shuffledCarousels);
                        }
                    }
                });
            });
        }

        const observer = new MutationObserver((mutationsList, observer) => {
            const carousels = document.querySelectorAll('.carousel-container');
            if (carousels.length > 0) {
                initializeCarousel();
                observer.disconnect();
            }
        });

        observer.observe(document.body, { childList: true, subtree: true });
    });
</script>


<style>

    #carousel-wrapper {
        position: relative;
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        height: 500px;
    }
    
    .carousel-container {
        width: 100%;
        height: 100%;
    }
    
    .main-nav-arrow {
        background-color: #4CAF50;
        color: white;
        border: none;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        font-size: 24px;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        z-index: 10;
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
    }
    
    .main-left-arrow {
        left: 20px;
    }
    
    .main-right-arrow {
        right: 20px; 
    }
    
    .main-nav-arrow:hover {
        background-color: #45a049;
    }
    
    .hidden {
        display: none;
    }
    
    @media (max-width: 768px) {
        #carousel-wrapper {
            max-width: 90%;
            height: 400px;
        }
    
        .main-nav-arrow {
            width: 40px;
            height: 40px;
            font-size: 20px;
        }
    
        .main-left-arrow {
            left: 10px;
        }
    
        .main-right-arrow {
            right: 10px;
        }
    }
    
    @media (max-width: 480px) {
        #carousel-wrapper {
            max-width: 95%;
            height: 300px;
        }
    
        .main-nav-arrow {
            width: 30px;
            height: 30px;
            font-size: 16px;
        }
    
        .main-left-arrow {
            left: 5px;
        }
    
        .main-right-arrow {
            right: 5px;
        }
    }
    
    </style>
    