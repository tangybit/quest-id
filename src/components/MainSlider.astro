---
import DataDisplay from './DataDisplay.astro'; 
import ScoreDisplay from './ScoreDisplay.astro';
import ImageDisplay from './ImageDisplay.astro';

// Utility function to shuffle an array
function shuffle(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// Accept 'dataGroupedByIndex' as a prop to generalize this component
const { dataGroupedByIndex } = Astro.props;
const dataEntries = shuffle(Object.entries(dataGroupedByIndex));

---

<div id="carousel-wrapper">
    <!-- Main Left Arrow for Previous Set -->
    <button id="main-left-arrow" class="main-nav-arrow main-left-arrow" aria-label="Previous set">&lt;</button>

    {dataEntries.length ? (
        dataEntries.map(([index, dataList], slidePosition) => {
            return (
                <div 
                    class="carousel-container hidden" 
                    key={index} 
                    data-index={index}
                    data-slide-position={slidePosition}
                >
                    <ImageDisplay imagePaths={dataList[0].imagePaths} /> 
                    <DataDisplay index={index} dataGroupedByIndex={dataGroupedByIndex} slidePosition={slidePosition + 1} />
                </div>
            );
        })
    ) : (
        <p>No data available.</p>
    )}

    <!-- Final Slide - Moved outside of the map loop -->
    <div class="carousel-container hidden" data-final-slide>
        <ScoreDisplay />
    </div>

    <!-- Main Right Arrow for Next Set -->
    <button id="main-right-arrow" class="main-nav-arrow main-right-arrow" aria-label="Next set">&gt;</button>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const carousels = document.querySelectorAll('.carousel-container');
        const mainLeftArrow = document.getElementById('main-left-arrow');
        const mainRightArrow = document.getElementById('main-right-arrow');
        let currentSetIndex = 0;

        // Initialize the carousel by showing the first slide
        if (carousels.length > 0) {
            showCarousel(currentSetIndex);
        }

        function showCarousel(index) {
            // Hide all carousels
            carousels.forEach((carousel) => {
                carousel.classList.add('hidden');
            });

            // Show the current carousel
            const currentCarousel = carousels[index];
            currentCarousel.classList.remove('hidden');

            // Check if the current slide is answered
            const isAnswered = currentCarousel.getAttribute('data-answered') === 'true';

            // Check if the current slide is the final slide
            const isFinalSlide = currentCarousel.hasAttribute('data-final-slide');

            // Disable "Next" button on the final slide or if the current slide is not answered
            const wasNextDisabled = mainRightArrow.disabled;
            mainRightArrow.disabled = isFinalSlide || !isAnswered;

            if (mainRightArrow.disabled !== wasNextDisabled) {
                console.log('Next Arrow disabled state changed to:', mainRightArrow.disabled);
            }

            // Disable "Previous" button on the first slide
            mainLeftArrow.disabled = index === 0;
        }

        mainLeftArrow.addEventListener('click', () => {
            currentSetIndex = (currentSetIndex - 1 + carousels.length) % carousels.length;
            showCarousel(currentSetIndex);
        });

        mainRightArrow.addEventListener('click', () => {
            const currentCarousel = carousels[currentSetIndex];
            const isAnswered = currentCarousel.getAttribute('data-answered') === 'true';
            const inputElement = currentCarousel.querySelector('.custom-input');

            // If the slide is not answered and it's not the final slide, shake the input
            if (!isAnswered && !currentCarousel.hasAttribute('data-final-slide')) {
                if (inputElement) {
                    // Remove the input-error class (to restart the animation if already applied)
                    inputElement.classList.remove('input-error');

                    // Trigger reflow to restart the animation
                    void inputElement.offsetWidth;

                    // Add the input-error class to apply the shake animation
                    inputElement.classList.add('input-error');
                }
                return;
            }

            // Proceed to the next slide if answered or it's the final slide
            currentSetIndex = (currentSetIndex + 1) % carousels.length;
            showCarousel(currentSetIndex);

            // Reset isAnswered for the new slide, unless it has already been answered
            const nextCarousel = carousels[currentSetIndex];
            if (nextCarousel.getAttribute('data-answered') !== 'true') {
                nextCarousel.setAttribute('data-answered', 'false');
            }
        });

        // Listen for updates to the answers
        document.addEventListener('answersUpdated', () => {
            const carousel = carousels[currentSetIndex];
            if (carousel) {
                carousel.setAttribute('data-answered', 'true');
                showCarousel(currentSetIndex);
            }
        });
    });
</script>


    
<style>
    
 
/* Styles for the carousel and arrows */
#carousel-wrapper {
    position: relative; /* This makes #carousel-wrapper the reference for absolutely positioned children */
    width: 100%; /* Set a fixed width to the wrapper to control the arrow positioning */
    max-width: 800px; /* Optional: Set a max-width to prevent overflow */
    margin: 0 auto; /* Center the container horizontally */
}

.carousel-container {
    position: relative;
    margin-bottom: 20px;
}

.main-nav-arrow {
    background-color: #4CAF50;
    color: white;
    border: none;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    font-size: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: background-color 0.3s;
    z-index: 10;
    position: absolute;
    top: 50%; /* Center vertically relative to #carousel-wrapper */
    transform: translateY(-50%);
}

.main-left-arrow {
    left: 10px; /* Adjust this to control how far from the left edge */
}

.main-right-arrow {
    right: 10px; /* Adjust this to control how far from the right edge */
}

.main-nav-arrow:hover {
    background-color: #45a049;
}

.hidden {
    display: none;
}


.hidden {
    display: none;
}

.next-error-shake {
  animation: shake 0.5s ease-in-out;
}

@keyframes shake {
  0% { transform: translateX(0); }
  25% { transform: translateX(-10px); }
  50% { transform: translateX(10px); }
  75% { transform: translateX(-10px); }
  100% { transform: translateX(0); }
}



</style>
      