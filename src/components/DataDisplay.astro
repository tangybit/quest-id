---
import InputField from './InputField.astro';
import Button from './Button.astro';

const { index, slidePosition, dataGroupedByIndex, sliderId } = Astro.props;
const itemList = dataGroupedByIndex[index];
const itemData = itemList ? itemList[0] : null;

---

{itemData ? (
    <div class="data-info" data-index={index} data-slide-position={slidePosition} data-slider-id={sliderId}>
      <h2 class="data-name hidden-info">{itemData['scientific name']}</h2>
      <p class="data-name hidden-info">{itemData['common name']}</p>
  
      <div class="input-container">
        <label for={`scientific-name-input-${sliderId}-${slidePosition}`} class="input-label">
          What is the scientific name of this species?
        </label>
  
        <div class="input-wrapper">
          <span id={`result-icon-${sliderId}-${slidePosition}`} class="result-icon"></span>
          <div class="shake-container">
            <InputField inputId={`scientific-name-input-${sliderId}-${slidePosition}`} placeholder="Type here..." />
          </div>
        </div>
  
<div class="button-container">
  <!-- Check Button -->
  <Button 
    id={`check-button-${sliderId}-${slidePosition}`} 
    text="Check" 
    className="check-button" 
    iconSrc="/check.png"
    /* No onClick here */
  />
  
  <!-- Skip Button -->
  <Button 
    id={`skip-button-${sliderId}-${slidePosition}`} 
    text="Skip" 
    className="skip-button" 
    iconSrc="/skip.png"
    /* No onClick here */
  />
  
  <!-- Flag Button -->
  <Button 
    id={`flag-button-${sliderId}-${slidePosition}`} 
    text="Flag" 
    className="flag-button" 
    iconSrc="/flag.png"
    /* No onClick here */
  />
</div>
</div>
</div>
  ) : (
    <p>No data available for this index.</p>
  )}
  

  <script>
    import { checkAnswer, skipAnswer, getSkippedQuestions} from '../utils/checkAnswer.js';

    document.addEventListener('DOMContentLoaded', () => {
     
        document.querySelectorAll('.data-info').forEach((element) => {
          
            const sliderId = element.getAttribute('data-slider-id');
            const slidePosition = parseInt(element.getAttribute('data-slide-position') ?? '0', 10);
            const checkButton = document.getElementById(`check-button-${sliderId}-${slidePosition}`);
            const skipButton = document.getElementById(`skip-button-${sliderId}-${slidePosition}`);  // Skip button reference
            const inputElement = document.getElementById(`scientific-name-input-${sliderId}-${slidePosition}`);
            const resultIconElement = document.getElementById(`result-icon-${sliderId}-${slidePosition}`);

            function reEnableForSkippedQuestions() {
            const skippedQuestionsForSlider = getSkippedQuestions(sliderId);  // Use the function to get skipped questions
                 if (skippedQuestionsForSlider.includes(slidePosition)) {
                 if (inputElement) inputElement.disabled = false;
                 if (checkButton) checkButton.disabled = false;
                 if (skipButton) skipButton.disabled = false;
                 if (resultIconElement) resultIconElement.textContent = '⏭️';  // Add the emoji indicating it's a skipped question
                //  console.log(`Re-enabled input and buttons for skipped question: SliderId ${sliderId}, SlidePosition ${slidePosition}`);
              }
            }

            // Run re-enable logic on load
            reEnableForSkippedQuestions();

            function handleSubmit() {
                if (inputElement) {
                    inputElement.classList.remove('input-error');

                    const userInput = inputElement.value.trim();

                    if (userInput === '') {
                        void inputElement.offsetWidth;
                        inputElement.classList.add('input-error');
                        return;
                    }

                    const correctAnswer = element.querySelector('h2').textContent;
                    const isCorrect = userInput.trim() === correctAnswer.trim();
                    resultIconElement.textContent = isCorrect ? '✅' : '❌';

                    element.querySelectorAll('.hidden-info').forEach(info => {
                        info.classList.remove('hidden-info');
                    });

                    const labelElement = element.querySelector('.input-label');
                    if (labelElement) {
                        labelElement.remove();
                    }

                    checkAnswer(sliderId, userInput, correctAnswer, slidePosition);

                    const event = new CustomEvent('answersUpdated', { detail: { slidePosition, sliderId } });
                    document.dispatchEvent(event);

                    inputElement.disabled = true;
                    checkButton.disabled = true;
                    skipButton.disabled = true;
                }
            }

            // Handle skipping the question
            function handleSkip() {
    // Retrieve the correct answer from the element, like in handleSubmit
    const correctAnswer = element.querySelector('h2').textContent.trim(); 

    // Log the correct answer for debugging
    // console.log('Correct answer for skip:', correctAnswer);

    // Call skipAnswer with the correct answer
    skipAnswer(sliderId, slidePosition, correctAnswer);
    resultIconElement.textContent = '⏭️'; 

    // Display hidden info (like explanations or feedback) after skipping
    element.querySelectorAll('.hidden-info').forEach(info => {
        info.classList.remove('hidden-info');
    });

    // Remove the input label if it exists
    const labelElement = element.querySelector('.input-label');
    if (labelElement) {
        labelElement.remove();
    }

    // Disable the input and buttons after skipping
    inputElement.disabled = true;  
    checkButton.disabled = true; 
    skipButton.disabled = true; 

    // Dispatch a custom event to indicate the question was skipped
    const event = new CustomEvent('skipped', { detail: { slidePosition, sliderId } });
    document.dispatchEvent(event);
}


            if (checkButton) {
                checkButton.addEventListener('click', handleSubmit);
            }

            if (skipButton) {
                skipButton.addEventListener('click', handleSkip);
            }

            if (inputElement) {
                inputElement.addEventListener('keydown', (event) => {
                    if (event.key === 'Enter') {
                        handleSubmit();
                    }
                });
            }
        });
    });
</script>

<style>

.hidden-info {
    display: none; 
}

</style>