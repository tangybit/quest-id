---
import Button from './Button.astro';
import '../styles/global.css';
const { sliderId } = Astro.props; // Get sliderId as a prop
---

<div class="score-table">
    <h2>Score Summary</h2>
    <!-- Add a new div for displaying the percentage -->
    <div id="percentage-display" class="percentage-display"></div>
    <!-- Scrollable container for the table -->
    <div class="scrollable-container">
        <table id="score-table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Your Answer</th>
                    <th>Correct Answer</th>
                    <th>Result</th>
                </tr>
            </thead>
            <tbody id="score-table-body">
                <!-- Table rows will be dynamically inserted here -->
            </tbody>
        </table>
    </div>

     <!-- "Take Again" Button -->
     <div class="take-again-button">
        <Button 
            id="take-again-btn" 
            text="Take Again" 
            className="btn-green" 
            onClick={() => {
                // Reset logic goes here
                window.location.reload(); // For simplicity, reload the page to reset
            }} 
        />
    </div>
</div>

<script>
    import { getAnswers, getScore } from '../utils/checkAnswer.js';

    document.addEventListener('DOMContentLoaded', () => {
        const sliderId = Astro.props.sliderId;
        console.log('ScoreDisplay initialized with sliderId:', sliderId);

        // Register the event listener as early as possible
        document.addEventListener('answersUpdated', (event) => {
            console.log('answersUpdated event received. Current sliderId:', sliderId, 'Event sliderId:', event.detail.sliderId);

            if (event.detail.sliderId === sliderId) {
                console.log('Updating score table for sliderId:', sliderId);
                updateScoreTable();
            }
        });

        function updateScoreTable() {
            const answers = getAnswers(sliderId); // Retrieve the answers for the current sliderId
            const tableBody = document.getElementById('score-table-body');
            tableBody.innerHTML = ''; // Clear the existing rows

            answers.forEach((answer, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${index + 1}</td>
                    <td>${answer.userInput}</td>
                    <td>${answer.correctAnswer}</td>
                    <td>${answer.isCorrect ? '✅' : '❌'}</td>
                `;
                tableBody.appendChild(row);
            });

            // Calculate the score and percentage
            const score = getScore(sliderId);
            const totalQuestions = answers.length;
            const percentage = totalQuestions > 0 ? ((score / totalQuestions) * 100).toFixed(2) : 0;

            const percentageDisplay = document.getElementById('percentage-display');
            percentageDisplay.textContent = `Percentage: ${percentage}%`;
        }

        updateScoreTable();

        const takeAgainBtn = document.getElementById('take-again-btn');
        if (takeAgainBtn) {
            takeAgainBtn.addEventListener('click', () => {
                window.location.reload();
            });
        }
    });
</script>


<style>

/* Basic styling for the score table */
.score-table {
    margin: 20px;
    padding: 10px;
    border: none; /* Remove any border */
}

/* Style for the percentage display */
.percentage-display {
    margin: 10px 0;
    font-size: 18px;
    font-weight: bold;
    text-align: center;
}

/* Scrollable container */
.scrollable-container {
    max-height: 450px; 
    max-width: 500px;/* Set a fixed height for the scrollable area */
    overflow-y: auto; /* Enable vertical scrolling */
}

/* Style for the table */
table {
    width: 100%;
    border-collapse: collapse;
    border: none; /* Remove border from the table */
}

th, td {
    padding: 10px 40px; /* Add padding for more space between columns */
    text-align: center;
}

/* Remove borders from the table header */
th {
    color: #333; /* Text color to contrast with the background */
    border: none; /* Remove header cell borders */
}

/* Remove borders from table cells */
td {
    border: none;
}

/* Remove borders from table body and rows */
tbody, tr {
    border: none;
}

.take-again-button {
    margin-top: 40px; /* Increase the margin to lower the button */
    text-align: center;
}

#score-table th:nth-child(1),
#score-table td:nth-child(1) {
    width: 5%;
}

#score-table th:nth-child(2),
#score-table td:nth-child(2) {
    width: 45%;
}

#score-table th:nth-child(3),
#score-table td:nth-child(3) {
    width: 45%;
}

#score-table th:nth-child(4),
#score-table td:nth-child(4) {
    width: 5%;
}


</style>