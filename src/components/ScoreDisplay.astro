---
import Button from './Button.astro';
const { sliderId } = Astro.props; 
---

<div class="score-table" data-slider-id={sliderId}>
    <h2>Score Summary</h2>
   
    <div id="percentage-display" class="percentage-display"></div>

    <div class="scrollable-container">
        <table id="score-table">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Your Answer</th>
                    <th>Correct Answer</th>
                    <th>Result</th>
                </tr>
            </thead>
            <tbody id="score-table-body">
               
            </tbody>
        </table>
    </div>

    <div class="take-again-button">
        <Button 
            id="take-again-btn" 
            text="Take Again" 
            className="btn-green" 
            onClick={() => {
            
                window.location.reload(); 
            }} 
        />
    </div>
</div>

<script>
    import { getAnswers } from '../utils/checkAnswer.js';

    document.addEventListener('DOMContentLoaded', () => {

        const scoreTables = document.querySelectorAll('.score-table');

        scoreTables.forEach((scoreTable) => {
        
            const sliderId = scoreTable.getAttribute('data-slider-id');
            if (!sliderId) {
                return;
            }

            // Event listener for answersUpdated
            document.addEventListener('answersUpdated', (event) => {
                if (event.detail.sliderId === sliderId) {
                    updateScoreTable(scoreTable, sliderId);
                }
            });

            // Function to update the score table
            function updateScoreTable(scoreTable, sliderId) {
                const answers = getAnswers(sliderId); // Get all answers (answered and skipped)
                const tableBody = scoreTable.querySelector('#score-table-body');
                tableBody.innerHTML = ''; 

                let score = 0; // Initialize the score
                let totalQuestions = answers.length; // Total number of questions

                // Iterate over answers to populate the table
                answers.forEach((answer, index) => {
                    const row = document.createElement('tr');

                    // If the question is answered correctly, increment the score
                    if (answer.answered && answer.isCorrect) {
                        score++;
                    }

                    // Leave userInput empty if the question is skipped
                    const userInputDisplay = answer.answered ? answer.userInput : '';

                    // Only show the correct answer if the question was answered (not skipped)
                    const correctAnswerDisplay = answer.answered ? (answer.correctAnswer || 'N/A') : 'N/A';

                    // Populate the table row
                    row.innerHTML = `
                        <td>${index + 1}</td>
                        <td>${userInputDisplay}</td>
                        <td>${correctAnswerDisplay}</td>
                        <td>${answer.status === 'skipped' ? '⏭️' : (answer.isCorrect ? '✅' : '❌')}</td>
                    `;
                    tableBody.appendChild(row);
                });

                // Calculate the percentage score
                const percentage = totalQuestions > 0 ? ((score / totalQuestions) * 100).toFixed(2) : 0;

                // Update the percentage display
                const percentageDisplay = scoreTable.querySelector('#percentage-display');
                percentageDisplay.textContent = `Percentage: ${percentage}%`;
            }

            // Handle take again buttons to reload the page
            const takeAgainButtons = document.querySelectorAll('#take-again-btn');
            takeAgainButtons.forEach((button) => {
                button.addEventListener('click', () => {
                    window.location.reload();
                });
            });

            // Initial update of the score table
            updateScoreTable(scoreTable, sliderId);
        });
    });
</script>

    

<style>

.score-table {
    margin: 20px;
    min-height: 800px;
    padding: 10px;
    border: none; 
}

.percentage-display {
    margin: 10px 0;
    font-size: 18px;
    font-weight: bold;
    text-align: center;
}

.scrollable-container {
    max-height: 800px; 
    max-width: 500px;
    overflow-y: auto;
    border: none; /* Remove any potential borders */
    box-shadow: none; /* Remove any shadows */
}

/* Ensure no borders on table and table rows */
table {
    width: 100%;
    border-collapse: collapse;
    border: none; 
    box-shadow: none; /* Prevent any shadows on the table */
}

th, td {
    padding: 10px 40px; 
    text-align: center;
    border: none; /* Ensure no borders on table cells */
}

th {
    color: #333; 
    border: none; 
}

td {
    border: none;
}

tbody, tr {
    border: none;
    box-shadow: none; /* Ensure no shadow or border on table rows */
}

.take-again-button {
    margin-top: 40px;
    text-align: center;
}

#score-table th:nth-child(1),
#score-table td:nth-child(1) {
    width: 5%;
}

#score-table th:nth-child(2),
#score-table td:nth-child(2) {
    width: 45%;
}

#score-table th:nth-child(3),
#score-table td:nth-child(3) {
    width: 45%;
}

#score-table th:nth-child(4),
#score-table td:nth-child(4) {
    width: 5%;
}


</style>